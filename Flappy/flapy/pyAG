import random

# Define os dados
weights = [5, 3, 4, 2]
values = [10, 8, 9, 5]
max_weight = 10

# Define o tamanho da população e número de gerações
pop_size = 100
generations = 1000

# Define a função de aptidão
def fitness(individual):
    total_weight = sum([weights[i] for i in range(len(individual)) if individual[i] == 1])
    if total_weight > max_weight:
        return 0
    total_value = sum([values[i] for i in range(len(individual)) if individual[i] == 1])
    return total_value

# Define o algoritmo genético
def genetic_algorithm(pop_size, generations):
    # Inicializa a população de indivíduos aleatoriamente
    population = [[random.randint(0, 1) for j in range(len(weights))] for i in range(pop_size)]
    
    # Evolui a população
    for i in range(generations):
        # Avalia a aptidão de cada indivíduo
        fitness_scores = [fitness(individual) for individual in population]
        
        # Seleciona os indivíduos mais aptos para reprodução
        parents = []
        for j in range(pop_size//2):
            parent1 = random.choices(population, weights=fitness_scores, k=1)[0]
            parent2 = random.choices(population, weights=fitness_scores, k=1)[0]
            parents.append((parent1, parent2))
        
        # Reproduz os indivíduos selecionados
        offspring = []
        for j in range(len(parents)):
            crossover_point = random.randint(1, len(weights)-1)
            child1 = parents[j][0][:crossover_point] + parents[j][1][crossover_point:]
            child2 = parents[j][1][:crossover_point] + parents[j][0][crossover_point:]
            offspring.append(child1)
            offspring.append(child2)
        
        # Aplica mutação aos indivíduos resultantes da reprodução
        for j in range(len(offspring)):
            for k in range(len(weights)):
                if random.random() < 0.01:
                    offspring[j][k] = 1 - offspring[j][k]
        
        # Substitui a população antiga pela nova população
        population = offspring
        
    # Retorna o indivíduo mais apto encontrado
    return max(population, key=fitness)

# Roda o algoritmo genético
best_individual = genetic_algorithm(pop_size, generations)

# Imprime os resultados
print("Items selecionados:")
for i in range(len(best_individual)):
    if best_individual[i] == 1:
        print("Item", i+1, "peso:", weights[i], "valor:", values[i])
print("Valor total:", fitness(best_individual))
